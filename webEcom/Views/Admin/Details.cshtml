@model webEcom.Models.ProductDATA

@{
    ViewData["Title"] = "Details";
}


<style>
   body {
     font-family:'Cloud Soft';
     background-color :white;
    
    } 

    .textt{
        font-size:2vw;
    }

    .textt1 {
        font-size: 1.5vw;
    }

    .card1:hover {
        transition-duration: 150ms;
        box-shadow: 0 5px 20px 5px #00000044;
    }

    .card1 .glow {
        position: absolute;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        background-image: radial-gradient(circle at 50% -20%, #ffffff22, #0000000f);
    }
</style>


<h1>รายละเอียด</h1>

<div>
    <h4>สินค้าชื่อ : @Html.DisplayFor(model => model.ProductName) </h4>
    <hr />

    <div class="row">


        <div class="col-sm-6">

            <div style="  border-radius:10% ; position: relative;display:inline-block;  transition-duration: 300ms;transition-property: transform, box-shadow;transition-timing-function: ease-out;transform: rotate3d(0);" class="card1 ">

            @if (Model.IformfileProductInputImage != null && Model.IformfileProductInputImage.Length > 0)
            {
                <img src="data:@Model.ProductImageType;base64,@Convert.ToBase64String(Model.IformfileProductInputImage)" class="rounded-4 img-fluid  shadow-lg " alt="User Picture" style="width:35vw ;border:solid 5px ;border-color:white;border-radius:5%" />
            }
            <div class="glow" >

            </div>
            </div>

         </div>

        <div class="col-sm-6 ">

            <div class=" rounded-4  shadow" style="border:solid 5px ;border-color:white;border-radius:5%;
                                                   display:inline-block ;padding:0.5vw 0.5vw 0 0.5vw;margin-top:4vw ;">
            <div style=" font-size:2.5vw;  ">

                <p> <b>   @Html.DisplayFor(model => model.ProductName) </b>     </p>
            </div>


            <div class="textt" style="margin-top:1vw ; ">

              <p>  <b>@Html.DisplayNameFor(model => model.ProductType)</b> : <span class="textt1"> @Html.DisplayFor(model => model.ProductType)</span>   </p>

            </div>


            <div class="textt  " style="margin-top:1vw  ;">

                <p> <b>Tag สินค้า</b> : <span class="textt1"> @Html.DisplayFor(model => model.ProductTag)</span>   </p>

            </div>

            <div class="textt " style="margin-top:1vw; ">

                <p>  <b>@Html.DisplayNameFor(model => model.ProductPrice)</b> : <span class="textt1"> @Html.DisplayFor(model => model.ProductPrice)</span>    บาท   </p>

            </div>


            <div class="textt  " style="margin-top:1vw;">

                <p>  <b>@Html.DisplayNameFor(model => model.ProductCount)</b> : <span class="textt1"> @Html.DisplayFor(model => model.ProductCount)</span>    หน่วย   </p>
            </div>
            </div>
         </div>
       


    
    </div>

       
        



   <br />

    <h5> <b>       @Html.DisplayNameFor(model => model.ProductDescription) </b></h5>

    <p> @Html.DisplayFor(model => model.ProductDescription)</p>
        










</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.IdProduct">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<script>

    const $card1 = document.querySelector('.card1');
    let bounds;

    function rotateToMouse(e) {
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        const leftX = mouseX - bounds.x;
        const topY = mouseY - bounds.y;
        const center = {
            x: leftX - bounds.width / 2,
            y: topY - bounds.height / 2
        }
        const distance = Math.sqrt(center.x ** 2 + center.y ** 2);

        $card1.style.transform = `
        scale3d(1.07, 1.07, 1.07)
        rotate3d(
          ${center.y / 100},
          ${-center.x / 100},
          0,
          ${Math.log(distance) * 4}deg
        )
      `;

        $card1.querySelector('.glow').style.backgroundImage = `
        radial-gradient(
          circle at
          ${center.x * 2 + bounds.width / 2}px
          ${center.y * 2 + bounds.height / 2}px,
          #ffffff55,
          #0000000f
        )
      `;
    }

    $card1.addEventListener('mouseenter', () => {
        bounds = $card1.getBoundingClientRect();
        document.addEventListener('mousemove', rotateToMouse);
    });

    $card1.addEventListener('mouseleave', () => {
        document.removeEventListener('mousemove', rotateToMouse);
        $card1.style.transform = '';
        $card1.style.background = '';
    });
</script>